github.com/jddixon/upax_go/TODO

2013-10-27
    * we must have a regCred.dat for the server running on the test     * DONE
        system in ./                                                    * DONE
    * a booting server without an LFS must find and parse ./regCred.dat
        to continue
        - once such a server has created its LFS it writes regCred.dat
            into it

2013-10-26
    CLUSTER (was cluster/TODO)
    * expect cluster names to look like reversed fully qualified
        domain names such as org.xlattice.upax.ABCDEF
    * for testing, expect to find the registry on 127.0.0.1:44444,		* DONE
        but registry credentials will be needed to get the		        * DONE
        registry's public keys		                                    * DONE
    * to test upax clusters		                                        * DONE
        - generated a random cluster name, then loop on the 		    * DONE
            registry asking for its clusterID until the 		        * DONE
            registry says that it is unknown		                    * DONE
        - then create the cluster with K a random number 3..7		    * DONE
            and epCount=2		                                        * DONE
        - this behavior requires an admin client which will do this		* DONE
        - cluster creation will have created K simple nodes; use		* DONE
            these to create K upax servers		                        * DONE
            * LFS for each is tmp/CLUSTER_NAME/SERVER_NAME		        * DONE
            * server creation should build a u16x16 file system
                under the LFS, including 
                    .xlattice/node.config                               * DONE
                    U/      0750
                    U/in    0770
                    U/tmp   0700
                    U/L     0600
                    U/x     0640, where x represents a hex digit
            * each server runs in a separate goroutine

        - create K2 (3..7? but chosen separately) clients; each
            of which runs in a separate goroutine
            * learns cluster configuration from the registry
            * then pumps K3 items into a randomly chosen server
            * sends back to the test master a list of K3 content
                keys

        - when all K2 clients are done, test master verifies that
            all K2 * K3 items are in the cluster
        - after some reasonable period of time, all K2 * K3 items
            should be on all K servers (in the current 
            implementation)

    * in tests as in production first communications of a new
        cluster are with xlReg on port 44444, default 127.0.0.1
        - cluster name defaults to "upax"
        - size defaults to 5
        - epCount is 2 (cluster-cluster, client-cluster)
        - default LFS is /var/app/upax for production,
            ./tmp/SERVER_NAME for test, where SERVER_NAME is
            locally unique
        - expected xlReg version is 0.2.0 or better

    * upax_go/node looks to be useless

    CLIENT (was client/TODO)
    * given a cluster name or ID plus registry credentials, a client
        should first obtain from the registry configuration 
        information on the cluster, which will include the IP addresses
        (endPoints) and public keys of cluster members
    * for testing purposes, expect the registry to be on port 44444
    * in production applications, expect the registry to be on 55555

2013-08-09 was: upax_go/ftlog/TODO
    * LogEntry.String() and Parse() support simple conversion 
        between in-memory objects and string files; need a
        Protobuf spec
        - but then need to be sure of ability to recover from 
            file corruption
        - same spec can of course be used to pass log entries
            between servers
        
2013-08-08
    * doTestBodyLine needs better tests of paths
        - rnglib should generate random POSIX paths
        - and random email addresses
2013-09-13  *** OBSOLETE ***
    * modify code so that Upax servers and clients use xlReg 	        * OBS
        to initiate communications (xlattice_go/reg/helloAndReply.go	* OBS
        - attrs has two role bits, 00 = client, 01 = mirror, 10 = server* OBS
	
    * p.proto drops Hello, which is replaced by PeerHelloAndReply	    * OBS
        sequence, xlattice_go/msg/helloAndReply.go	                    * OBS
	
    * begin the game with serialization of the UpaxNode to and from	    * OBS
        LFS	                                                            * OBS
        - UpaxNode is serialized in reverse order, so 	                * OBS
            BaseNode | Node | UpaxNode	                                * OBS
        - serialization is written to/loaded from LFS/.xlattice/config	* OBS
        - by default, if that file exists it is loaded and configuration* OBS
            attributes are taken from the file	                        * OBS
	
    * upaxNode/New has p []xn.Peer as a parameter, this should most	    * OBS
        certainly be a pointer or slice of pointers instead; fix	    * OBS
        and also fix xn.New, which is where the problem really is	    * OBS
